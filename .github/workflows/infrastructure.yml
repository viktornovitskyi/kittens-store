name: "infrastructure"

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  infrastructure-plan:
    name: "Infrastructure plan"
    runs-on: ubuntu-latest
    outputs:
      vpc_id: ${{ steps.vpc_id_output.outputs.vpc_id }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform -chdir=ops/tf/global/ fmt -check

      - name: Terraform Init
        id: init
        run: terraform -chdir=ops/tf/global/ init

      - name: Terraform Validate
        id: validate
        run: terraform -chdir=ops/tf/global/ validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform -chdir=ops/tf/global/ plan -no-color
        continue-on-error: true

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Output VPC id
        id: vpc_id_output
        run: echo "::set-output name=vpc_id::$(terraform-bin -chdir=ops/tf/global/ output vpc_id)"

      - name: Save db_url to artifact
        run: terraform-bin -chdir=ops/tf/global/ output database_connection_url > db_url.txt

      - name: Create output artifact
        uses: actions/upload-artifact@v2
        with:
         path: db_url.txt
         name: db_url

  job2:
    runs-on: ubuntu-latest
    needs: infrastructure-plan
    steps:
      - run: echo ${{needs.infrastructure-plan.outputs.vpc_id}}

  job_3:
    name: Display results
    needs: infrastructure-plan
    runs-on: ubuntu-latest
    steps:
      - name: Download math result for infrastructure-plan
        uses: actions/download-artifact@v2
        with:
          name: db_url
      - name: Print the final result
        shell: bash
        run: |
          value=`cat db_url.txt`
          echo The result is $value

  infrastructure-apply:
    name: "Infrastructure apply"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        id: init
        run: terraform -chdir=ops/tf/global/ init

      - name: Terraform Apply
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: terraform -chdir=ops/tf/global/ apply -auto-approve
